From b552f755de420b959937afcda30c488d97183cd0 Mon Sep 17 00:00:00 2001
From: Andreas Monzner <andreas.monzner@dream-property.net>
Date: Mon, 9 Mar 2015 13:19:38 +0100
Subject: [PATCH] add support for toshiba nand flash, add workaround for jffs2
 with bch-4 error correction

---
 drivers/mtd/brcmnand/brcmnand_base.c |   84 +++++++++++++++++++++++++++++++---
 1 file changed, 78 insertions(+), 6 deletions(-)

diff --git a/drivers/mtd/brcmnand/brcmnand_base.c b/drivers/mtd/brcmnand/brcmnand_base.c
index f7a06a0..e49149d 100644
--- a/drivers/mtd/brcmnand/brcmnand_base.c
+++ b/drivers/mtd/brcmnand/brcmnand_base.c
@@ -2950,7 +2950,7 @@ printk("%s: before intr_status=%08x\n", __FUNCTION__, intr_status);
 			}
 
 #ifndef DEBUG_HW_ECC
-			if (oobarea || (valid == BRCMNAND_CORRECTABLE_ECC_ERROR)) 
+			if (oobarea || (valid == BRCMNAND_CORRECTABLE_ECC_ERROR && chip->ecclevel == BRCMNAND_ECC_HAMMING)) 
 #endif
 			{
 				PLATFORM_IOFLUSH_WAR();
@@ -6165,7 +6165,29 @@ brcmnand_write_page(struct mtd_info *mtd,
 	int oobWritten = 0;
 	int ret = 0;
 	uint64_t offset = page << chip->page_shift;
+	uint8_t eccbuf[chip->eccsteps * chip->eccOobSize];
 
+	if (chip->ecclayout == &brcmnand_oob_bch4_2k && !inp_oob) {
+		uint32_t block_size = (1 << chip->erase_shift);
+		if (!(((uint32_t)offset) % block_size) && inp_buf[0] == 0x85 && inp_buf[1] == 0x19 && inp_buf[3] == 0xe0)
+		{
+			uint32_t acc = brcmnand_ctrl_read(bchp_nand_acc_control(0));
+			brcmnand_ctrl_write(bchp_nand_acc_control(0), acc & (~BCHP_NAND_ACC_CONTROL_RD_ECC_EN_MASK));
+
+			memset(eccbuf, 0xff, sizeof(eccbuf));
+
+			ret = brcmnand_posted_read_oob(mtd, eccbuf, offset, 0);
+
+			if (!ret) {
+				if (!memcmp(eccbuf+1, "\x85\x19\x03\x20\x08\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff", 15))
+					inp_oob = eccbuf;
+			}
+			else
+				printk("BCH-4 jffs2 hack read oob failed %08llx\n", offset);
+
+			brcmnand_ctrl_write(bchp_nand_acc_control(0), acc);
+		}
+	}
 
 if (gdebug > 3 ) {
 printk("-->%s, offset=%0llx\n", __FUNCTION__, offset);}
@@ -6411,13 +6433,37 @@ brcmnand_fill_oob(struct brcmnand_chip *chip, uint8_t *oob, struct mtd_oob_ops *
 	size_t writtenLen = oob - ops->oobbuf; 
 	size_t len = ops->ooblen - writtenLen;
 
-	
 	switch(ops->mode) {
 
 	case MTD_OPS_PLACE_OOB:
-	case MTD_OPS_RAW:
-		memcpy(chip->oob_poi + ops->ooboffs, oob, len);
+	case MTD_OPS_RAW: {
+		if (chip->ecclayout == &brcmnand_oob_bch4_2k && !memcmp(oob+2, "\x85\x19\x03\x20", 4) && !memcmp(oob+9, "\x08\x00\x00\x00", 4)) {
+			struct nand_oobfree *oobfree_in = brcmnand_oob_64.oobfree;
+			struct nand_oobfree *oobfree_out = brcmnand_oob_bch4_2k.oobfree;
+			int cnt=0;
+			int rp=oobfree_in->offset, wp=oobfree_out->offset;
+
+			/* translate oob content prepared for hamming ecc to bch-4 ecc
+			   take care .. with bch-4 only 35 bytes are free usable per sector in oob area...
+			   with hamming it was 50 bytes... so the last 15 bytes are lost!!
+			   but who cares ubi doesn't use the oob area.. and jffs2 just need 8 bytes for the block marker */
+
+			BUG_ON(writtenLen || ops->ooboffs);  // this code only works for single page writes...
+
+			memset(chip->oob_poi, 0xff, chip->eccOobSize);
+
+			while (oobfree_in->length && oobfree_out->length && cnt++ < len) {
+				chip->oob_poi[wp++] = oob[rp++];
+				if (rp == oobfree_in->offset + oobfree_in->length)
+					rp = (++oobfree_in)->offset;
+				if (wp == oobfree_out->offset + oobfree_out->length)
+					wp = (++oobfree_out)->offset;
+			}
+		}
+		else
+			memcpy(chip->oob_poi + ops->ooboffs, oob, len);
 		return oob + len;
+	}
 
 	case MTD_OPS_AUTO_OOB: {
 		struct nand_oobfree *free = chip->ecclayout->oobfree;
@@ -6722,11 +6768,21 @@ printk("-->%s, to=%08x, len=%d\n", __FUNCTION__, (uint32_t) to, (int)ops->len);}
 	page = to >> chip->page_shift;
 
 	while(1) {
+		uint32_t acc = 0;
+
 		/* Submit one page at a time */
-		 
 		numPages = 1;
-		
+
 		if (likely(oob)) {
+			if (chip->ecclayout == &brcmnand_oob_bch4_2k) {
+				uint32_t block_size = (1 << chip->erase_shift);
+
+				if (!(((uint32_t)to) % block_size) && !memcmp(oob, "\x85\x19\x03\x20\x08\x00\x00\x00", 8)) {
+					acc = brcmnand_ctrl_read(bchp_nand_acc_control(0));
+					brcmnand_ctrl_write(bchp_nand_acc_control(0), acc & (~BCHP_NAND_ACC_CONTROL_WR_ECC_EN_MASK));
+				}
+			}
+
 			chip->oob_poi = BRCMNAND_OOBBUF(chip->ctrl->buffers);
 			memset(chip->oob_poi, 0xff, mtd->oobsize);
 			oob = brcmnand_fill_oob(chip, oob, ops);
@@ -6737,6 +6793,9 @@ printk("-->%s, to=%08x, len=%d\n", __FUNCTION__, (uint32_t) to, (int)ops->len);}
 
 		status |= chip->write_page_oob(mtd, chip->oob_poi, page);
 
+		if (acc)
+			brcmnand_ctrl_write(bchp_nand_acc_control(0), acc);
+
 		if (status)
 			break;
 		
@@ -9485,6 +9544,19 @@ printk("%s: Ecc level set to %d, sectorSize=%d from ID table\n", __FUNCTION__, c
 	 * else ID not in database, but CONFIG reg was passed at command line, already handled
 	 */
 
+	if (foundInIdTable && brcmnand_dev_id == TOSHIBA_TC58NVG3S0ETA00 && brcmnand_maf_id == FLASHTYPE_TOSHIBA && (nand_config >> 24) == 0x48) {
+		nand_config &= ~(BCHP_NAND_CONFIG_BLOCK_SIZE_MASK);
+		nand_config |= (BCHP_NAND_CONFIG_BLOCK_SIZE_BK_SIZE_128KB << BCHP_NAND_CONFIG_BLOCK_SIZE_SHIFT);
+
+		nand_config &= ~(BCHP_NAND_CONFIG_PAGE_SIZE_MASK);
+		nand_config |= (BCHP_NAND_CONFIG_PAGE_SIZE_PG_SIZE_2KB << BCHP_NAND_CONFIG_PAGE_SIZE_SHIFT);
+
+		nand_config &= ~(BCHP_NAND_CONFIG_DEVICE_SIZE_MASK);
+		nand_config |= (BCHP_NAND_CONFIG_DEVICE_SIZE_DVC_SIZE_512MB << BCHP_NAND_CONFIG_DEVICE_SIZE_SHIFT);
+
+		chip->ctrl_write(bchp_nand_config(chip->ctrl->CS[chip->csi]), nand_config);
+	}
+
 	/* 
 	 * For some ID case, the ID decode does not yield all informations,
 	 * so we read it back, making sure that NAND CONFIG register and chip-> struct
-- 
1.7.10.4

