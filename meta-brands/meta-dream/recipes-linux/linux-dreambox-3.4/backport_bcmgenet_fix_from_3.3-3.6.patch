diff --git a/drivers/net/ethernet/broadcom/genet/bcmgenet.c b/drivers/net/ethernet/broadcom/genet/bcmgenet.c
index 754c39a..97fad5a 100644
--- a/drivers/net/ethernet/broadcom/genet/bcmgenet.c
+++ b/drivers/net/ethernet/broadcom/genet/bcmgenet.c
@@ -619,6 +619,40 @@ err2:
 
 	return -ENODEV;
 }
+
+static void bcmgenet_free_rx_buffers(struct BcmEnet_devctrl *pDevCtrl)
+{
+	struct Enet_CB *cb;
+	unsigned int i;
+	unsigned int freed = 0;
+
+	for (i = 0; i < pDevCtrl->nrRxBds; i++) {
+		cb = &pDevCtrl->rxCbs[i];
+
+		if (dma_unmap_addr(cb, dma_addr)) {
+			dma_unmap_single(&pDevCtrl->dev->dev,
+					 dma_unmap_addr(cb, dma_addr),
+					 pDevCtrl->rxBufLen, DMA_FROM_DEVICE);
+			dma_unmap_addr_set(cb, dma_addr, 0);
+		}
+
+		if (cb->skb) {
+			freed++;
+			dev_kfree_skb(pDevCtrl->rxCbs[i].skb);
+			cb->skb = NULL;
+		}
+
+		/* Reset the address to 0, such that next calls to assign_rx_buffers
+		 * re-allocate buffers
+		 */
+		pDevCtrl->rxBds[i].address = 0;
+	}
+
+	pDevCtrl->rxBdAssignPtr = pDevCtrl->rxBds;
+
+	TRACE(("%s: freed: %d SKBs\n", __func__, freed));
+}
+
 /* --------------------------------------------------------------------------
 Name: bcmgenet_close
 Purpose: Stop communicating with the outside world
@@ -690,6 +724,8 @@ static int bcmgenet_close(struct net_device *dev)
 
 	if (brcm_pm_deep_sleep())
 		save_state(pDevCtrl);
+	else
+		bcmgenet_free_rx_buffers(pDevCtrl);
 
 	if (device_may_wakeup(&dev->dev) && pDevCtrl->dev_asleep) {
 		if (pDevCtrl->wolopts & (WAKE_MAGIC|WAKE_MAGICSECURE))
@@ -1936,6 +1972,7 @@ static irqreturn_t bcmgenet_isr1(int irq, void *dev_id)
 	struct BcmEnet_devctrl *pDevCtrl = dev_id;
 	volatile struct intrl2Regs *intrl2 = pDevCtrl->intrl2_1;
 	unsigned int index;
+	unsigned long flags;
 
 	/* Save irq status for bottom-half processing. */
 	pDevCtrl->irq1_stat = intrl2->cpu_stat & ~intrl2->cpu_mask_status;
@@ -1950,8 +1987,11 @@ static irqreturn_t bcmgenet_isr1(int irq, void *dev_id)
 	if (pDevCtrl->irq1_stat & 0x0000ffff) {
 		index = 0;
 		for (index = 0; index < 16; index++) {
-			if (pDevCtrl->irq1_stat & (1<<index))
+			if (pDevCtrl->irq1_stat & (1<<index)) {
+				spin_lock_irqsave(&pDevCtrl->lock, flags);
 				bcmgenet_tx_reclaim(pDevCtrl->dev, index);
+				spin_unlock_irqrestore(&pDevCtrl->lock, flags);
+			}
 		}
 	}
 
@@ -2215,7 +2255,6 @@ static int assign_rx_buffers(struct BcmEnet_devctrl *pDevCtrl)
 		handleAlignment(pDevCtrl, skb);
 
 		/* keep count of any BD's we refill */
-		bdsfilled++;
 		cb->skb = skb;
 		mapping = dma_map_single(&pDevCtrl->dev->dev,
 			skb->data, pDevCtrl->rxBufLen, DMA_FROM_DEVICE);
@@ -2236,6 +2275,7 @@ static int assign_rx_buffers(struct BcmEnet_devctrl *pDevCtrl)
 		else
 			pDevCtrl->rxBdAssignPtr++;
 
+		bdsfilled++;
 	}
 
 	/* Enable rx DMA incase it was disabled due to running out of rx BD */
@@ -2811,13 +2851,6 @@ static int bcmgenet_init_dev(struct BcmEnet_devctrl *pDevCtrl, bool reset)
 	lastBd = pDevCtrl->txBds + pDevCtrl->nrTxBds - 1;
 	pDevCtrl->txFreeBds = pDevCtrl->nrTxBds;
 
-	/* fill receive buffers */
-	if (assign_rx_buffers(pDevCtrl) == 0) {
-		printk(KERN_ERR "Failed to assign rx buffers\n");
-		ret = -ENOMEM;
-		goto error1;
-	}
-
 	TRACE(("%s done!\n", __func__));
 	/* init umac registers */
 	if (init_umac(pDevCtrl, reset)) {
@@ -2861,12 +2894,8 @@ static void bcmgenet_uninit_dev(struct BcmEnet_devctrl *pDevCtrl)
 				pDevCtrl->txCbs[i].skb = NULL;
 			}
 		}
-		for (i = 0; i < pDevCtrl->nrRxBds; i++) {
-			if (pDevCtrl->rxCbs[i].skb != NULL) {
-				dev_kfree_skb(pDevCtrl->rxCbs[i].skb);
-				pDevCtrl->rxCbs[i].skb = NULL;
-			}
-		}
+
+		bcmgenet_free_rx_buffers(pDevCtrl);
 
 		/* free the transmit buffer descriptor */
 		if (pDevCtrl->txBds)
